/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Checkin as PrismaCheckin,
  User as PrismaUser,
} from "@prisma/client";

export class CheckinServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CheckinCountArgs, "select">): Promise<number> {
    return this.prisma.checkin.count(args);
  }

  async checkins(args: Prisma.CheckinFindManyArgs): Promise<PrismaCheckin[]> {
    return this.prisma.checkin.findMany(args);
  }
  async checkin(
    args: Prisma.CheckinFindUniqueArgs
  ): Promise<PrismaCheckin | null> {
    return this.prisma.checkin.findUnique(args);
  }
  async createCheckin(args: Prisma.CheckinCreateArgs): Promise<PrismaCheckin> {
    return this.prisma.checkin.create(args);
  }
  async updateCheckin(args: Prisma.CheckinUpdateArgs): Promise<PrismaCheckin> {
    return this.prisma.checkin.update(args);
  }
  async deleteCheckin(args: Prisma.CheckinDeleteArgs): Promise<PrismaCheckin> {
    return this.prisma.checkin.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.checkin
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
